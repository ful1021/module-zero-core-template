<%@ CodeTemplate Language="C#" TargetLanguage="C#" %> 
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="CodeSmith.Engine.Json" %>
namespace AbpCompanyName.AbpProjectName.Authorization
{
    public static class PermissionNames
    {
        <%foreach(var item in GetPermissionJson()){%>
		/// <summary>
		/// <%=item.Summary %>
		/// </summary>
		public const string <%=item.Name %> = "<%=item.Value %>";

        <%} %>
    }
}
<script runat="template">

    public static List<PermissionConst> GetPermissionJson()
    {
       var fileFullName = "Permissions/Permission.json";
        string text = System.IO.File.ReadAllText(fileFullName);
        var json = JsonConvert.DeserializeObject<List<PermissionJson>>(text).OrderBy(c => c.Order).ToList();

        var list = BuildPermissionConst(json);
        return list;
    }

    private static List<PermissionConst> BuildPermissionConst(List<PermissionJson> permissionJsons, string name = null, string value = null, string summary = null, List<PermissionConst> permissionConsts = null)
    {
        permissionConsts = permissionConsts ?? new List<PermissionConst>();
        foreach (var item in permissionJsons)
        {
            var permissionConst = new PermissionConst
            {
                Summary = $"{summary}_{item.DisplayName}".Trim('_'),
                Name = $"{name}_{item.Name}".Trim('_').Replace('.', '_'),
                Value = $"{value}.{item.Name}".Trim('.').Replace('_', '.')
            };
            permissionConsts.Add(permissionConst);
            var children = item.GetChildren();
            if (children.Any())
            {
                BuildPermissionConst(children, permissionConst.Name, permissionConst.Value, permissionConst.Summary,
                    permissionConsts);
            }
        }
        return permissionConsts;
    }
    public class PermissionConst
    {
        public string Summary { get; set; }
        public string Name { get; set; }
        public string Value { get; set; }
    }

    public class PermissionJson
    {
        public PermissionJson()
        {
            Order = 100;
        }

        public string Name { get; set; }
        public string DisplayName { get; set; }
        public string Description { get; set; }

        [JsonProperty(PropertyName = "multiTenancySides")]
        public MultiTenancySides? MultiTenancySide { private get; set; }

        public bool DefaultPermission { private get; set; }
        public List<PermissionJson> Children { private get; set; }
        public int Order { get; set; }
        public List<int> DisableOrder { get; set; }

        public List<PermissionJson> GetChildren()
        {
            Children = Children ?? new List<PermissionJson>();
            DisableOrder = DisableOrder ?? new List<int>();
            if (DefaultPermission)
            {
                Children.Add(new PermissionJson
                {
                    Name = "Create",
                    DisplayName = "新增",
                    Order = 10,
                    DefaultPermission = false
                });
                Children.Add(new PermissionJson
                {
                    Name = "Edit",
                    DisplayName = "编辑",
                    Order = 20,
                    DefaultPermission = false
                });
                Children.Add(new PermissionJson
                {
                    Name = "Delete",
                    DisplayName = "删除",
                    Order = 30,
                    DefaultPermission = false
                });
            }
            if (MultiTenancySide.HasValue)
            {
                Children.ForEach(c =>
                {
                    c.MultiTenancySide = MultiTenancySide.Value;
                });
            }
            return Children.OrderBy(c => c.Order).Where(c => !DisableOrder.Contains(c.Order)).ToList();
        }

        public MultiTenancySides GetMultiTenancySides()
        {
            if (MultiTenancySide.HasValue)
            {
                return MultiTenancySide.Value;
            }
            return MultiTenancySides.Tenant | MultiTenancySides.Host;
        }
    }

    public enum MultiTenancySides
    {
        Tenant = 1,
        Host = 2
    }
</script>